// Art Gallery Management System - React + Vite Frontend

// This is a simplified implementation of the main components for the frontend
// Directory structure:
// - src/
//   - components/
//   - pages/
//   - context/
//   - services/
//   - App.jsx
//   - main.jsx

// src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App'
import { AuthProvider } from './context/AuthContext'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
)

// src/App.jsx
import { Routes, Route } from 'react-router-dom'
import Navbar from './components/Navbar'
import Dashboard from './pages/Dashboard'
import Artworks from './pages/Artworks'
import Artists from './pages/Artists'
import Exhibitions from './pages/Exhibitions'
import Sales from './pages/Sales'
import Login from './pages/Login'
import Register from './pages/Register'
import ProtectedRoute from './components/ProtectedRoute'
import { useAuth } from './context/AuthContext'

function App() {
  const { isAuthenticated } = useAuth()
  
  return (
    <div className="app">
      <Navbar />
      <main className="container">
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/" element={
            <ProtectedRoute isAuthenticated={isAuthenticated}>
              <Dashboard />
            </ProtectedRoute>
          } />
          <Route path="/artworks" element={
            <ProtectedRoute isAuthenticated={isAuthenticated}>
              <Artworks />
            </ProtectedRoute>
          } />
          <Route path="/artists" element={
            <ProtectedRoute isAuthenticated={isAuthenticated}>
              <Artists />
            </ProtectedRoute>
          } />
          <Route path="/exhibitions" element={
            <ProtectedRoute isAuthenticated={isAuthenticated}>
              <Exhibitions />
            </ProtectedRoute>
          } />
          <Route path="/sales" element={
            <ProtectedRoute isAuthenticated={isAuthenticated}>
              <Sales />
            </ProtectedRoute>
          } />
        </Routes>
      </main>
    </div>
  )
}

export default App

// src/context/AuthContext.jsx
import { createContext, useContext, useState, useEffect } from 'react'
import api from '../services/api'

const AuthContext = createContext()

export const useAuth = () => useContext(AuthContext)

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem('token')
      if (token) {
        try {
          api.defaults.headers.common['Authorization'] = `Bearer ${token}`
          const response = await api.get('/auth/me')
          setUser(response.data)
          setIsAuthenticated(true)
        } catch (error) {
          localStorage.removeItem('token')
          delete api.defaults.headers.common['Authorization']
        }
      }
      setLoading(false)
    }
    
    checkAuth()
  }, [])

  const login = async (email, password) => {
    try {
      const response = await api.post('/auth/login', { email, password })
      const { token, user } = response.data
      localStorage.setItem('token', token)
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`
      setUser(user)
      setIsAuthenticated(true)
      return true
    } catch (error) {
      return false
    }
  }

  const logout = () => {
    localStorage.removeItem('token')
    delete api.defaults.headers.common['Authorization']
    setUser(null)
    setIsAuthenticated(false)
  }

  const register = async (userData) => {
    try {
      const response = await api.post('/auth/register', userData)
      return response.data
    } catch (error) {
      throw error
    }
  }

  const value = {
    user,
    isAuthenticated,
    loading,
    login,
    logout,
    register
  }

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  )
}

// src/components/ProtectedRoute.jsx
import { Navigate } from 'react-router-dom'

const ProtectedRoute = ({ isAuthenticated, children }) => {
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />
  }
  return children
}

export default ProtectedRoute

// src/components/Navbar.jsx
import { Link } from 'react-router-dom'
import { useAuth } from '../context/AuthContext'

const Navbar = () => {
  const { isAuthenticated, logout } = useAuth()

  return (
    <nav className="navbar">
      <div className="logo">
        <Link to="/">Art Gallery Management</Link>
      </div>
      {isAuthenticated ? (
        <ul className="nav-links">
          <li><Link to="/">Dashboard</Link></li>
          <li><Link to="/artworks">Artworks</Link></li>
          <li><Link to="/artists">Artists</Link></li>
          <li><Link to="/exhibitions">Exhibitions</Link></li>
          <li><Link to="/sales">Sales</Link></li>
          <li><button onClick={logout}>Logout</button></li>
        </ul>
      ) : (
        <ul className="nav-links">
          <li><Link to="/login">Login</Link></li>
          <li><Link to="/register">Register</Link></li>
        </ul>
      )}
    </nav>
  )
}

export default Navbar

// src/pages/Login.jsx
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../context/AuthContext'

const Login = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const { login } = useAuth()
  const navigate = useNavigate()

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError('')
    
    if (!email || !password) {
      setError('Please fill in all fields')
      return
    }
    
    const success = await login(email, password)
    if (success) {
      navigate('/')
    } else {
      setError('Invalid email or password')
    }
  }

  return (
    <div className="auth-container">
      <h2>Login</h2>
      {error && <div className="error-message">{error}</div>}
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <button type="submit" className="btn-primary">Login</button>
      </form>
    </div>
  )
}

export default Login

// src/pages/Dashboard.jsx
import { useState, useEffect } from 'react'
import api from '../services/api'

const Dashboard = () => {
  const [stats, setStats] = useState({
    artworks: 0,
    artists: 0,
    exhibitions: 0,
    sales: 0,
    revenue: 0
  })
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await api.get('/dashboard/stats')
        setStats(response.data)
        setLoading(false)
      } catch (error) {
        console.error('Failed to fetch dashboard stats', error)
        setLoading(false)
      }
    }

    fetchStats()
  }, [])

  if (loading) {
    return <div>Loading...</div>
  }

  return (
    <div className="dashboard">
      <h1>Dashboard</h1>
      <div className="stats-container">
        <div className="stat-card">
          <h3>Artworks</h3>
          <p className="stat-number">{stats.artworks}</p>
        </div>
        <div className="stat-card">
          <h3>Artists</h3>
          <p className="stat-number">{stats.artists}</p>
        </div>
        <div className="stat-card">
          <h3>Exhibitions</h3>
          <p className="stat-number">{stats.exhibitions}</p>
        </div>
        <div className="stat-card">
          <h3>Sales</h3>
          <p className="stat-number">{stats.sales}</p>
        </div>
        <div className="stat-card">
          <h3>Revenue</h3>
          <p className="stat-number">${stats.revenue.toLocaleString()}</p>
        </div>
      </div>
      
      <div className="recent-activity">
        <h2>Recent Activity</h2>
        {/* This would be populated with actual data from the API */}
        <p>No recent activity to display.</p>
      </div>
    </div>
  )
}

export default Dashboard

// src/pages/Artworks.jsx
import { useState, useEffect } from 'react'
import api from '../services/api'

const Artworks = () => {
  const [artworks, setArtworks] = useState([])
  const [loading, setLoading] = useState(true)
  const [formData, setFormData] = useState({
    title: '',
    artist: '',
    medium: '',
    price: '',
    description: '',
    imageUrl: ''
  })
  const [showForm, setShowForm] = useState(false)
  const [isEditing, setIsEditing] = useState(false)
  const [currentId, setCurrentId] = useState(null)

  useEffect(() => {
    fetchArtworks()
  }, [])

  const fetchArtworks = async () => {
    try {
      const response = await api.get('/artworks')
      setArtworks(response.data)
      setLoading(false)
    } catch (error) {
      console.error('Failed to fetch artworks', error)
      setLoading(false)
    }
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    try {
      if (isEditing) {
        await api.put(`/artworks/${currentId}`, formData)
      } else {
        await api.post('/artworks', formData)
      }
      resetForm()
      fetchArtworks()
    } catch (error) {
      console.error('Failed to save artwork', error)
    }
  }

  const handleEdit = (artwork) => {
    setFormData({
      title: artwork.title,
      artist: artwork.artist,
      medium: artwork.medium,
      price: artwork.price,
      description: artwork.description,
      imageUrl: artwork.imageUrl
    })
    setCurrentId(artwork._id)
    setIsEditing(true)
    setShowForm(true)
  }

  const handleDelete = async (id) => {
    if (confirm('Are you sure you want to delete this artwork?')) {
      try {
        await api.delete(`/artworks/${id}`)
        fetchArtworks()
      } catch (error) {
        console.error('Failed to delete artwork', error)
      }
    }
  }

  const resetForm = () => {
    setFormData({
      title: '',
      artist: '',
      medium: '',
      price: '',
      description: '',
      imageUrl: ''
    })
    setIsEditing(false)
    setCurrentId(null)
    setShowForm(false)
  }

  if (loading) {
    return <div>Loading...</div>
  }

  return (
    <div className="artworks-page">
      <div className="page-header">
        <h1>Artworks</h1>
        <button 
          className="btn-primary" 
          onClick={() => setShowForm(!showForm)}
        >
          {showForm ? 'Cancel' : 'Add Artwork'}
        </button>
      </div>

      {showForm && (
        <div className="form-container">
          <h2>{isEditing ? 'Edit Artwork' : 'Add New Artwork'}</h2>
          <form onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="title">Title</label>
              <input
                type="text"
                id="title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="artist">Artist</label>
              <input
                type="text"
                id="artist"
                name="artist"
                value={formData.artist}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="medium">Medium</label>
              <input
                type="text"
                id="medium"
                name="medium"
                value={formData.medium}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="price">Price</label>
              <input
                type="number"
                id="price"
                name="price"
                value={formData.price}
                onChange={handleChange}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="description">Description</label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleChange}
              />
            </div>
            <div className="form-group">
              <label htmlFor="imageUrl">Image URL</label>
              <input
                type="text"
                id="imageUrl"
                name="imageUrl"
                value={formData.imageUrl}
                onChange={handleChange}
              />
            </div>
            <div className="form-buttons">
              <button type="submit" className="btn-primary">
                {isEditing ? 'Update' : 'Save'}
              </button>
              <button type="button" className="btn-secondary" onClick={resetForm}>
                Cancel
              </button>
            </div>
          </form>
        </div>
      )}

      <div className="artworks-grid">
        {artworks.length > 0 ? (
          artworks.map(artwork => (
            <div key={artwork._id} className="artwork-card">
              <img 
                src={artwork.imageUrl || '/api/placeholder/300/200'} 
                alt={artwork.title} 
                className="artwork-image" 
              />
              <div className="artwork-details">
                <h3>{artwork.title}</h3>
                <p>Artist: {artwork.artist}</p>
                <p>Medium: {artwork.medium}</p>
                <p>Price: ${parseFloat(artwork.price).toLocaleString()}</p>
                <div className="artwork-actions">
                  <button 
                    className="btn-edit" 
                    onClick={() => handleEdit(artwork)}
                  >
                    Edit
                  </button>
                  <button 
                    className="btn-delete" 
                    onClick={() => handleDelete(artwork._id)}
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          ))
        ) : (
          <p>No artworks found. Add some new pieces to get started!</p>
        )}
      </div>
    </div>
  )
}

export default Artworks

// src/services/api.js
import axios from 'axios'

const api = axios.create({
  baseURL: 'http://localhost:3000/api'
})

// Add request interceptor to include auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => Promise.reject(error)
)

export default api










------------------------------------------------------------------------------------------------------------------------------------------------


// Art Gallery Management System - Express Backend

// Directory structure:
// - src/
//   - models/
//   - controllers/
//   - routes/
//   - middleware/
//   - config/
//   - server.js

// src/server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');
const artworkRoutes = require('./routes/artworks');
const artistRoutes = require('./routes/artists');
const exhibitionRoutes = require('./routes/exhibitions');
const salesRoutes = require('./routes/sales');
const dashboardRoutes = require('./routes/dashboard');
const { errorHandler } = require('./middleware/errorHandler');

// Load environment variables
dotenv.config();

// Initialize app
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/artworks', artworkRoutes);
app.use('/api/artists', artistRoutes);
app.use('/api/exhibitions', exhibitionRoutes);
app.use('/api/sales', salesRoutes);
app.use('/api/dashboard', dashboardRoutes);

// Error handling middleware
app.use(errorHandler);

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// src/config/database.js
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error.message);
    process.exit(1);
  }
};

module.exports = connectDB;

// src/middleware/auth.js
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
  let token;

  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith('Bearer')
  ) {
    try {
      // Get token from header
      token = req.headers.authorization.split(' ')[1];

      // Verify token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);

      // Get user from the token
      req.user = await User.findById(decoded.id).select('-password');

      next();
    } catch (error) {
      console.error(error);
      res.status(401).json({ message: 'Not authorized, token failed' });
    }
  }

  if (!token) {
    res.status(401).json({ message: 'Not authorized, no token' });
  }
};

const admin = (req, res, next) => {
  if (req.user && req.user.isAdmin) {
    next();
  } else {
    res.status(401).json({ message: 'Not authorized as an admin' });
  }
};

module.exports = { protect, admin };

// src/middleware/errorHandler.js
const errorHandler = (err, req, res, next) => {
  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  
  res.status(statusCode).json({
    message: err.message,
    stack: process.env.NODE_ENV === 'production' ? null : err.stack
  });
};

module.exports = { errorHandler };

// src/models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true
  },
  isAdmin: {
    type: Boolean,
    required: true,
    default: false
  }
}, {
  timestamps: true
});

// Compare entered password with hashed password
userSchema.methods.matchPassword = async function(enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

// Encrypt password before saving
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) {
    next();
  }

  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

const User = mongoose.model('User', userSchema);

module.exports = User;

// src/models/Artwork.js
const mongoose = require('mongoose');

const artworkSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  artist: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Artist',
    required: true
  },
  description: {
    type: String,
    required: true
  },
  medium: {
    type: String,
    required: true
  },
  dimensions: {
    width: Number,
    height: Number,
    depth: Number,
    unit: {
      type: String,
      enum: ['cm', 'in'],
      default: 'cm'
    }
  },
  yearCreated: Number,
  price: {
    type: Number,
    required: true
  },
  status: {
    type: String,
    enum: ['available', 'sold', 'on exhibition', 'on loan'],
    default: 'available'
  },
  imageUrl: String,
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, {
  timestamps: true
});

const Artwork = mongoose.model('Artwork', artworkSchema);

module.exports = Artwork;

// src/models/Artist.js
const mongoose = require('mongoose');

const artistSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  bio: String,
  nationality: String,
  birthYear: Number,
  deathYear: Number,
  email: String,
  phone: String,
  website: String,
  imageUrl: String,
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, {
  timestamps: true
});

const Artist = mongoose.model('Artist', artistSchema);

module.exports = Artist;

// src/models/Exhibition.js
const mongoose = require('mongoose');

const exhibitionSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  description: String,
  startDate: {
    type: Date,
    required: true
  },
  endDate: {
    type: Date,
    required: true
  },
  location: String,
  artworks: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Artwork'
  }],
  featured: {
    type: Boolean,
    default: false
  },
  imageUrl: String,
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, {
  timestamps: true
});

const Exhibition = mongoose.model('Exhibition', exhibitionSchema);

module.exports = Exhibition;

// src/models/Sale.js
const mongoose = require('mongoose');

const saleSchema = new mongoose.Schema({
  artwork: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Artwork',
    required: true
  },
  salePrice: {
    type: Number,
    required: true
  },
  buyer: {
    name: {
      type: String,
      required: true
    },
    email: String,
    phone: String,
    address: String
  },
  saleDate: {
    type: Date,
    default: Date.now
  },
  paymentMethod: {
    type: String,
    enum: ['cash', 'credit card', 'bank transfer', 'check', 'other'],
    default: 'cash'
  },
  commission: {
    type: Number,
    default: 0
  },
  notes: String,
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, {
  timestamps: true
});

const Sale = mongoose.model('Sale', saleSchema);

module.exports = Sale;

// src/controllers/authController.js
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Generate JWT
const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: '30d'
  });
};

// @desc    Register a new user
// @route   POST /api/auth/register
// @access  Public
const registerUser = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // Check if user exists
    const userExists = await User.findOne({ email });

    if (userExists) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Create user
    const user = await User.create({
      name,
      email,
      password
    });

    if (user) {
      res.status(201).json({
        _id: user._id,
        name: user.name,
        email: user.email,
        isAdmin: user.isAdmin,
        token: generateToken(user._id)
      });
    } else {
      res.status(400).json({ message: 'Invalid user data' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Authenticate user & get token
// @route   POST /api/auth/login
// @access  Public
const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Check for user email
    const user = await User.findOne({ email });

    if (user && (await user.matchPassword(password))) {
      res.json({
        _id: user._id,
        name: user.name,
        email: user.email,
        isAdmin: user.isAdmin,
        token: generateToken(user._id)
      });
    } else {
      res.status(401).json({ message: 'Invalid email or password' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Get user profile
// @route   GET /api/auth/me
// @access  Private
const getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);

    if (user) {
      res.json({
        _id: user._id,
        name: user.name,
        email: user.email,
        isAdmin: user.isAdmin
      });
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

module.exports = {
  registerUser,
  loginUser,
  getUserProfile
};

// src/controllers/artworkController.js
const Artwork = require('../models/Artwork');

// @desc    Get all artworks
// @route   GET /api/artworks
// @access  Private
const getArtworks = async (req, res) => {
  try {
    const artworks = await Artwork.find({}).populate('artist', 'name');
    res.json(artworks);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Get a single artwork
// @route   GET /api/artworks/:id
// @access  Private
const getArtworkById = async (req, res) => {
  try {
    const artwork = await Artwork.findById(req.params.id).populate('artist');

    if (artwork) {
      res.json(artwork);
    } else {
      res.status(404).json({ message: 'Artwork not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Create a new artwork
// @route   POST /api/artworks
// @access  Private
const createArtwork = async (req, res) => {
  try {
    const {
      title,
      artist,
      description,
      medium,
      dimensions,
      yearCreated,
      price,
      status,
      imageUrl
    } = req.body;

    const artwork = new Artwork({
      title,
      artist,
      description,
      medium,
      dimensions,
      yearCreated,
      price,
      status,
      imageUrl,
      createdBy: req.user._id
    });

    const createdArtwork = await artwork.save();
    res.status(201).json(createdArtwork);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Update an artwork
// @route   PUT /api/artworks/:id
// @access  Private
const updateArtwork = async (req, res) => {
  try {
    const {
      title,
      artist,
      description,
      medium,
      dimensions,
      yearCreated,
      price,
      status,
      imageUrl
    } = req.body;

    const artwork = await Artwork.findById(req.params.id);